
T8537.hs:20:5: warning:
    Forall'd constraint ‘Shape 'Z @@ Int’ is not bound in RULE lhs
      Orig bndrs: [irred_a30v, irred_a30w]
      Orig lhs: let {
                  $d(%%)_a30Y :: () :: Constraint
                  [LclId]
                  $d(%%)_a30Y
                    = irred_a30v
                      `cast` (Sub (T8537.R:@@rank[0] <'Z>_N)
                              :: Coercible (Shape @@ 'Z) (() :: Constraint)) } in
                let {
                  irred_a30z :: Shape 'Z @@ Int
                  [LclId]
                  irred_a30z
                    = $d(%%)_a30Y
                      `cast` (Sub (Sym (T8537.R:@@ranka[0] <'Z>_N <Int>_N))
                              :: Coercible (() :: Constraint) (Shape 'Z @@ Int)) } in
                let {
                  irred_a30A :: Shape 'Z @@ Int
                  [LclId]
                  irred_a30A
                    = $d(%%)_a30Y
                      `cast` (Sub (Sym (T8537.R:@@ranka[0] <'Z>_N <Int>_N))
                              :: Coercible (() :: Constraint) (Shape 'Z @@ Int)) } in
                $cfmap @ Int @ Int irred_a30z irred_a30A
      optimised lhs: $cfmap
                       @ Int
                       @ Int
                       ((irred_a30v
                         `cast` (Sub (T8537.R:@@rank[0] <'Z>_N)
                                 :: Coercible (Shape @@ 'Z) (() :: Constraint)))
                        `cast` (Sub (Sym (T8537.R:@@ranka[0] <'Z>_N <Int>_N))
                                :: Coercible (() :: Constraint) (Shape 'Z @@ Int)))
                       ((irred_a30v
                         `cast` (Sub (T8537.R:@@rank[0] <'Z>_N)
                                 :: Coercible (Shape @@ 'Z) (() :: Constraint)))
                        `cast` (Sub (Sym (T8537.R:@@ranka[0] <'Z>_N <Int>_N))
                                :: Coercible (() :: Constraint) (Shape 'Z @@ Int)))
