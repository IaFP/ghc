
T15629.hs:26:37: error:
    • Expected kind ‘x1 ~> F x1 ab1’,
        but ‘F1Sym :: x ~> F x z’ has kind ‘x1 ~> F x1 z’
    • In the first argument of ‘Comp’, namely ‘(F1Sym :: x ~> F x z)’
      In the first argument of ‘Proxy’, namely
        ‘((Comp (F1Sym :: x ~> F x z) F2Sym) :: F x ab ~> F x ab)’
      In the type signature:
        g :: forall z ab.
             Proxy ((Comp (F1Sym :: x ~> F x z) F2Sym) :: F x ab ~> F x ab)

T15629.hs:27:9: error:
    • Couldn't match kind ‘z’ with ‘ab1’
      ‘z’ is a rigid type variable bound by
        the type signature for:
          g :: forall z1 ab1. Proxy (Comp F1Sym F2Sym)
        at T15629.hs:26:5-84
      ‘ab1’ is a rigid type variable bound by
        the type signature for:
          g :: forall z1 ab1. Proxy (Comp F1Sym F2Sym)
        at T15629.hs:26:5-84
      When matching types
        f0 :: x ~> F x ab
        F1Sym :: TyFun x1 (F x1 z) -> *
      Expected type: Proxy (Comp F1Sym F2Sym)
        Actual type: Proxy (Comp f0 F2Sym)
    • In the expression: sg Proxy Proxy
      In an equation for ‘g’: g = sg Proxy Proxy
      In an equation for ‘f’:
          f _
            = ()
            where
                g ::
                  forall z ab.
                  Proxy ((Comp (F1Sym :: x ~> F x z) F2Sym) :: F x ab ~> F x ab)
                g = sg Proxy Proxy
    • Relevant bindings include
        g :: Proxy (Comp F1Sym F2Sym) (bound at T15629.hs:27:5)
        f :: Proxy x1 -> () (bound at T15629.hs:24:1)
