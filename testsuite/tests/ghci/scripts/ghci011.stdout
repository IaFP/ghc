type [] :: * -> *
data [] a = [] | a : [a]
  	-- Defined in ‘GHC.Types’
instance Applicative [] -- Defined in ‘GHC.Base’
instance Eq a => Eq [a] -- Defined in ‘GHC.Classes’
instance Functor [] -- Defined in ‘GHC.Base’
instance Monad [] -- Defined in ‘GHC.Base’
instance Monoid [a] -- Defined in ‘GHC.Base’
instance Ord a => Ord [a] -- Defined in ‘GHC.Classes’
instance Semigroup [a] -- Defined in ‘GHC.Base’
instance Total [] -- Defined in ‘GHC.Base’
instance Traversable [] -- Defined in ‘Data.Traversable’
instance Show a => Show [a] -- Defined in ‘GHC.Show’
instance MonadFail [] -- Defined in ‘Control.Monad.Fail’
instance Read a => Read [a] -- Defined in ‘GHC.Read’
instance Foldable [] -- Defined in ‘Data.Foldable’
type instance forall k1 (a :: k1). [] @@ a = () :: Constraint
  	-- Defined in ‘GHC.Base’
type () :: *
data () = ()
  	-- Defined in ‘GHC.Tuple’
instance Eq () -- Defined in ‘GHC.Classes’
instance Monoid () -- Defined in ‘GHC.Base’
instance Ord () -- Defined in ‘GHC.Classes’
instance Semigroup () -- Defined in ‘GHC.Base’
instance Enum () -- Defined in ‘GHC.Enum’
instance Show () -- Defined in ‘GHC.Show’
instance Read () -- Defined in ‘GHC.Read’
instance Bounded () -- Defined in ‘GHC.Enum’
type (,) :: * -> * -> *
data (,) a b = (,) a b
  	-- Defined in ‘GHC.Tuple’
instance Monoid a => Applicative ((,) a) -- Defined in ‘GHC.Base’
instance (Eq b, Eq a) => Eq (a, b) -- Defined in ‘GHC.Classes’
instance Functor ((,) a) -- Defined in ‘GHC.Base’
instance Monoid a => Monad ((,) a) -- Defined in ‘GHC.Base’
instance (Monoid b, Monoid a) => Monoid (a, b)
  -- Defined in ‘GHC.Base’
instance (Ord b, Ord a) => Ord (a, b) -- Defined in ‘GHC.Classes’
instance (Semigroup b, Semigroup a) => Semigroup (a, b)
  -- Defined in ‘GHC.Base’
instance Total ((,) a) -- Defined in ‘GHC.Base’
instance Traversable ((,) a) -- Defined in ‘Data.Traversable’
instance (Show b, Show a) => Show (a, b) -- Defined in ‘GHC.Show’
instance (Read b, Read a) => Read (a, b) -- Defined in ‘GHC.Read’
instance Foldable ((,) a) -- Defined in ‘Data.Foldable’
instance (Bounded b, Bounded a) => Bounded (a, b)
  -- Defined in ‘GHC.Enum’
type instance (,) b @@ a = () :: Constraint
  	-- Defined in ‘Data.Traversable’
type instance (,) @@ a = () :: Constraint
  	-- Defined in ‘Data.Traversable’
type instance forall k1 b (a :: k1). (,) b @@ a = () :: Constraint
  	-- Defined in ‘GHC.Base’
type instance forall k1 (a :: k1). (,) @@ a = () :: Constraint
  	-- Defined in ‘GHC.Base’
