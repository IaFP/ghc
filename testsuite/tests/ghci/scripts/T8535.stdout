type (->) :: * -> * -> *
data (->) a b
  	-- Defined in ‘GHC.Prim’
infixr -1 ->
instance Applicative ((->) r) -- Defined in ‘GHC.Base’
instance Functor ((->) r) -- Defined in ‘GHC.Base’
instance Monad ((->) r) -- Defined in ‘GHC.Base’
instance Monoid b => Monoid (a -> b) -- Defined in ‘GHC.Base’
instance Semigroup b => Semigroup (a -> b) -- Defined in ‘GHC.Base’
instance (Either @@ a) => Total (Either a)
  -- Defined in ‘Data.Either’
instance Total [] -- Defined in ‘GHC.Base’
instance Total Maybe -- Defined in ‘GHC.Base’
instance Total IO -- Defined in ‘GHC.Base’
instance Total ((,) a) -- Defined in ‘GHC.Base’
type instance Maybe @@ a = () :: Constraint
  	-- Defined in ‘GHC.Maybe’
type instance Dual @@ a = () :: Constraint
  	-- Defined in ‘base-4.14.0.0:Data.Semigroup.Internal’
type instance Endo @@ a = () :: Constraint
  	-- Defined in ‘base-4.14.0.0:Data.Semigroup.Internal’
type instance Sum @@ a = () :: Constraint
  	-- Defined in ‘base-4.14.0.0:Data.Semigroup.Internal’
type instance Product @@ a = () :: Constraint
  	-- Defined in ‘base-4.14.0.0:Data.Semigroup.Internal’
type instance forall k (f :: k -> *) (a :: k). Alt f @@ a = f @@ a
  	-- Defined in ‘base-4.14.0.0:Data.Semigroup.Internal’
type instance forall k (f :: k -> *). Alt @@ f = () :: Constraint
  	-- Defined in ‘base-4.14.0.0:Data.Semigroup.Internal’
type instance Alt @@ k = () :: Constraint
  	-- Defined in ‘base-4.14.0.0:Data.Semigroup.Internal’
type instance Either a @@ b = () :: Constraint
  	-- Defined in ‘Data.Either’
type instance Either @@ a = () :: Constraint
  	-- Defined in ‘Data.Either’
type instance First @@ a = () :: Constraint
  	-- Defined in ‘Data.Monoid’
type instance Last @@ a = () :: Constraint
  	-- Defined in ‘Data.Monoid’
type instance forall k (f :: k -> *) (a :: k). Ap f @@ a = f @@ a
  	-- Defined in ‘Data.Monoid’
type instance forall k (f :: k -> *). Ap @@ f = () :: Constraint
  	-- Defined in ‘Data.Monoid’
type instance Ap @@ k = () :: Constraint
  	-- Defined in ‘Data.Monoid’
type instance (,) b @@ a = () :: Constraint
  	-- Defined in ‘Data.Traversable’
type instance (,) @@ a = () :: Constraint
  	-- Defined in ‘Data.Traversable’
type instance forall k1 b (a :: k1). (->) b @@ a = () :: Constraint
  	-- Defined in ‘GHC.Base’
type instance forall k1 (a :: k1). (->) @@ a = () :: Constraint
  	-- Defined in ‘GHC.Base’
type instance forall k1 i h g f e d c b (a :: k1). (,,,,,,,,)
                                                     i h g f e d c b
                                                   @@ a
  = () :: Constraint
  	-- Defined in ‘GHC.Base’
type instance forall k1 h g f e d c b (a :: k1). (,,,,,,,,)
                                                   h g f e d c b
                                                 @@ a
  = () :: Constraint
  	-- Defined in ‘GHC.Base’
type instance forall k1 g f e d c b (a :: k1). (,,,,,,,,)
                                                 g f e d c b
                                               @@ a
  = () :: Constraint
  	-- Defined in ‘GHC.Base’
type instance forall k1 f e d c b (a :: k1). (,,,,,,,,) f e d c b
                                             @@ a
  = () :: Constraint
  	-- Defined in ‘GHC.Base’
type instance forall k1 e d c b (a :: k1). (,,,,,,,,) e d c b @@ a
  = () :: Constraint
  	-- Defined in ‘GHC.Base’
type instance forall k1 d c b (a :: k1). (,,,,,,,,) d c b @@ a
  = () :: Constraint
  	-- Defined in ‘GHC.Base’
type instance forall k1 c b (a :: k1). (,,,,,,,,) c b @@ a
  = () :: Constraint
  	-- Defined in ‘GHC.Base’
type instance forall k1 b (a :: k1). (,,,,,,,,) b @@ a
  = () :: Constraint
  	-- Defined in ‘GHC.Base’
type instance forall k1 (a :: k1). (,,,,,,,,) @@ a
  = () :: Constraint
  	-- Defined in ‘GHC.Base’
type instance forall k1 h g f e d c b (a :: k1). (,,,,,,,)
                                                   h g f e d c b
                                                 @@ a
  = () :: Constraint
  	-- Defined in ‘GHC.Base’
type instance forall k1 g f e d c b (a :: k1). (,,,,,,,)
                                                 g f e d c b
                                               @@ a
  = () :: Constraint
  	-- Defined in ‘GHC.Base’
type instance forall k1 f e d c b (a :: k1). (,,,,,,,) f e d c b
                                             @@ a
  = () :: Constraint
  	-- Defined in ‘GHC.Base’
type instance forall k1 e d c b (a :: k1). (,,,,,,,) e d c b @@ a
  = () :: Constraint
  	-- Defined in ‘GHC.Base’
type instance forall k1 d c b (a :: k1). (,,,,,,,) d c b @@ a
  = () :: Constraint
  	-- Defined in ‘GHC.Base’
type instance forall k1 c b (a :: k1). (,,,,,,,) c b @@ a
  = () :: Constraint
  	-- Defined in ‘GHC.Base’
type instance forall k1 b (a :: k1). (,,,,,,,) b @@ a
  = () :: Constraint
  	-- Defined in ‘GHC.Base’
type instance forall k1 (a :: k1). (,,,,,,,) @@ a
  = () :: Constraint
  	-- Defined in ‘GHC.Base’
type instance forall k1 g f e d c b (a :: k1). (,,,,,,) g f e d c b
                                               @@ a
  = () :: Constraint
  	-- Defined in ‘GHC.Base’
type instance forall k1 f e d c b (a :: k1). (,,,,,,) f e d c b
                                             @@ a
  = () :: Constraint
  	-- Defined in ‘GHC.Base’
type instance forall k1 e d c b (a :: k1). (,,,,,,) e d c b @@ a
  = () :: Constraint
  	-- Defined in ‘GHC.Base’
type instance forall k1 d c b (a :: k1). (,,,,,,) d c b @@ a
  = () :: Constraint
  	-- Defined in ‘GHC.Base’
type instance forall k1 c b (a :: k1). (,,,,,,) c b @@ a
  = () :: Constraint
  	-- Defined in ‘GHC.Base’
type instance forall k1 b (a :: k1). (,,,,,,) b @@ a
  = () :: Constraint
  	-- Defined in ‘GHC.Base’
type instance forall k1 (a :: k1). (,,,,,,) @@ a = () :: Constraint
  	-- Defined in ‘GHC.Base’
type instance forall k1 f e d c b (a :: k1). (,,,,,) f e d c b @@ a
  = () :: Constraint
  	-- Defined in ‘GHC.Base’
type instance forall k1 e d c b (a :: k1). (,,,,,) e d c b @@ a
  = () :: Constraint
  	-- Defined in ‘GHC.Base’
type instance forall k1 d c b (a :: k1). (,,,,,) d c b @@ a
  = () :: Constraint
  	-- Defined in ‘GHC.Base’
type instance forall k1 c b (a :: k1). (,,,,,) c b @@ a
  = () :: Constraint
  	-- Defined in ‘GHC.Base’
type instance forall k1 b (a :: k1). (,,,,,) b @@ a
  = () :: Constraint
  	-- Defined in ‘GHC.Base’
type instance forall k1 (a :: k1). (,,,,,) @@ a = () :: Constraint
  	-- Defined in ‘GHC.Base’
type instance forall k1 e d c b (a :: k1). (,,,,) e d c b @@ a
  = () :: Constraint
  	-- Defined in ‘GHC.Base’
type instance forall k1 d c b (a :: k1). (,,,,) d c b @@ a
  = () :: Constraint
  	-- Defined in ‘GHC.Base’
type instance forall k1 c b (a :: k1). (,,,,) c b @@ a
  = () :: Constraint
  	-- Defined in ‘GHC.Base’
type instance forall k1 b (a :: k1). (,,,,) b @@ a
  = () :: Constraint
  	-- Defined in ‘GHC.Base’
type instance forall k1 (a :: k1). (,,,,) @@ a = () :: Constraint
  	-- Defined in ‘GHC.Base’
type instance forall k1 d c b (a :: k1). (,,,) d c b @@ a
  = () :: Constraint
  	-- Defined in ‘GHC.Base’
type instance forall k1 c b (a :: k1). (,,,) c b @@ a
  = () :: Constraint
  	-- Defined in ‘GHC.Base’
type instance forall k1 b (a :: k1). (,,,) b @@ a
  = () :: Constraint
  	-- Defined in ‘GHC.Base’
type instance forall k1 (a :: k1). (,,,) @@ a = () :: Constraint
  	-- Defined in ‘GHC.Base’
type instance forall k1 c b (a :: k1). (,,) c b @@ a
  = () :: Constraint
  	-- Defined in ‘GHC.Base’
type instance forall k1 b (a :: k1). (,,) b @@ a = () :: Constraint
  	-- Defined in ‘GHC.Base’
type instance forall k1 (a :: k1). (,,) @@ a = () :: Constraint
  	-- Defined in ‘GHC.Base’
type instance forall k1 b (a :: k1). (,) b @@ a = () :: Constraint
  	-- Defined in ‘GHC.Base’
type instance forall k1 (a :: k1). (,) @@ a = () :: Constraint
  	-- Defined in ‘GHC.Base’
type instance forall k1 (a :: k1). Maybe @@ a = () :: Constraint
  	-- Defined in ‘GHC.Base’
type instance forall k1 (a :: k1). IO @@ a = () :: Constraint
  	-- Defined in ‘GHC.Base’
type instance forall k1 (a :: k1). [] @@ a = () :: Constraint
  	-- Defined in ‘GHC.Base’
